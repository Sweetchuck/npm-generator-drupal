<?php

// @codingStandardsIgnoreStart
/**
 * Class RoboFile.
 */
class RoboFile extends \Robo\Tasks
// @codingStandardsIgnoreEnd
{
    use Cheppers\Robo\Task\Phpcs\LoadTasks;

    /**
     * @var array
     */
    protected $composerInfo = [];

    /**
     * @var string
     */
    protected $packageVendor = '';

    /**
     * @var string
     */
    protected $packageName = '';

    /**
     * @var string
     */
    protected $binDir = 'vendor/bin';

    /**
     * RoboFile constructor.
     */
    public function __construct()
    {
        $this->initComposerInfo();

        $this->setContainer(\Robo\Config::getContainer());

        /** @var \Robo\Container\RoboContainer $c */
        $c = $this->getContainer();
        $c
            ->addServiceProvider(static::getPhpcsServiceProvider())
            ->addServiceProvider(\Robo\Task\Filesystem\loadTasks::getFilesystemServices());
    }

    /**
     * Git "pre-commit" hook callback.
     *
     * @return \Robo\Collection\Collection
     */
    public function githookPreCommit()
    {
        return $this
            ->collection()
            ->add($this->taskComposerValidate(), 'lint.composer.lock')
            ->add($this->getTaskPhpcsLint(), 'lint.phpcs.psr2');
    }

    /**
     * Git "post-checkout" hook callback.
     *
     * @param string $old_ref
     *   The ref of the previous HEAD.
     * @param string $new_ref
     *   The ref of the new HEAD (which may or may not have changed).
     * @param string $is_branch
     *   A flag indicating whether the checkout was a branch checkout (changing
     *   branches, flag=1) or a file checkout (retrieving a file from the index,
     *   flag=0).
     */
    public function githookPostCheckout($old_ref, $new_ref, $is_branch)
    {
        $command = sprintf(
            '%s diff --exit-code --name-only %s..%s -- %s %s',
            escapeshellcmd($this->gitExecutable),
            escapeshellarg($old_ref),
            escapeshellarg($new_ref),
            escapeshellarg('composer.json'),
            escapeshellarg('composer.lock')
        );

        $process = new Process($command);
        $process->run();
        if (!$process->isSuccessful()) {
            $this->yell('The "composer.{json|lock}" has changed. You have to run `composer install`', 40, 'yellow');
        }
    }

    /**
     * @return \Cheppers\Robo\Task\Phpcs\TaskPhpcsLint
     */
    protected function getTaskPhpcsLint()
    {
        return $this->taskPhpcsLint([
            'colors' => 'always',
            'standard' => 'PSR2',
            'reports' => [
                'full' => null,
                'checkstyle' => 'reports/checkstyle.phpcs.psr2.xml',
            ],
            'files' => [
                'RoboFile.php',
            ],
        ]);
    }

    /**
     * @return $this
     */
    protected function initComposerInfo()
    {
        if (!$this->composerInfo && is_readable('composer.json')) {
            $this->composerInfo = json_decode(file_get_contents('composer.json'), true);
            list($this->packageVendor, $this->packageName) = explode('/', $this->composerInfo['name']);
        }

        return $this;
    }
}
